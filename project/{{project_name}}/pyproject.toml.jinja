[tool.poetry]
name = "{{ project_name }}"
version = "0.1.0"
description = "{{ description }}"
authors = ["{{ author_name }} <{{ author_email }}>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.8.2"
pydantic-settings = "^2.4.0"
aiogram = "^3.12.0"
loguru = "^0.7.2"
{% if use_redis %}redis = "^5.0.8"{% endif %}
{% if use_sqlalchemy %}
alembic = "^1.13.2"
sqlalchemy = "^2.0.32"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
greenlet = "^3.0.3"
{% endif %}
{% if use_semantic_release %}python-semantic-release = "^9.8.7"{% endif %}

[tool.poetry.group.dev.dependencies]
{% if use_ruff %}
ruff = "0.6.2"
ruff-lsp = "0.0.55"
{% endif %}
{% if use_pre_commit and (use_ruff or use_commitizen) %}
pre-commit = "^3.8.0"
{% endif %}
{% if use_commitizen %}commitizen = "^3.13.0"{% endif %}

{% if include_test %}
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
{% endif %}

{% if include_test %}
[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = [".", "src"]
{% endif %}

{% if use_ruff %}
[tool.ruff]
line-length = 80
extend-exclude = ["hooks/"]

[tool.ruff.lint]
ignore = ["B008", "ANN101"]
select = ["A", "B", "C", "E", "F", "I", "Q", "ASYNC", "N", "W", "UP", "T20", "SIM", "ANN", "PL"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403"] # unused imports
"models.py" = ["N805", "A003"] # cls instead self, id for modles
"schemas.py" = ["N805", "A003"] # cls instead self, id for modles
"mixins.py" = ["N805", "A003", "ANN201"] # cls instead self, id for modles
"requests.py" = ["N805", "A003"] # cls instead self, id for modles
"test_*.py" = ["ANN201"]
"src/bot/utils/middlewares/*.py" = ["ANN401"]

{% endif %}
{% if use_commitizen %}
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
{% endif %}
{% if use_semantic_release %}
[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
hvcs = "github"
commit_message = "chore(release): v{version}"
commit_parser = "angular"
upload_to_pypi = false
upload_to_release = true
upload_to_repository = true
logging_use_named_masks = true
major_on_zero = true
version_source = "tag"
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]


[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
token = { env = "GITHUB_TOKEN" }


[tool.semantic_release.publish]
dist_glob_patterns = []
upload_to_vcs_release = false
{% endif %}


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
