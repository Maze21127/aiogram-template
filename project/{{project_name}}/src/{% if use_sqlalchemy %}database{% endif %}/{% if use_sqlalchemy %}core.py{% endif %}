import uuid
from typing import Annotated

from sqlalchemy import BigInteger, Boolean, String, types
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)
from sqlalchemy.orm import DeclarativeBase, mapped_column

from config import get_db_settings

db_settings = get_db_settings()
engine = create_async_engine(
    db_settings.DSN.unicode_string(),
    echo=False,
    execution_options={"isolation_level": "AUTOCOMMIT"},
)

async_session = async_sessionmaker(engine, expire_on_commit=False)


async def get_session() -> AsyncSession:
    async with async_session() as session:
        yield session


str_256_unique_not_null = Annotated[
    str, mapped_column(String(256), nullable=False, unique=True)
]
str_256_nullable = Annotated[str, mapped_column(String(256), nullable=True)]
str_256_nullable_uniq = Annotated[
    str, mapped_column(String(256), nullable=True, unique=True)
]
str_256 = Annotated[str, String(256)]
guid_pk = Annotated[
    uuid.UUID, mapped_column(primary_key=True, default=uuid.uuid4)
]
int_pk = Annotated[int, mapped_column(primary_key=True)]
big_int_pk = Annotated[
    int, mapped_column(BigInteger, nullable=False, primary_key=True)
]
big_int = Annotated[int, mapped_column(BigInteger, nullable=False, primary_key=True)]
bool_default_false = Annotated[bool, mapped_column(Boolean, default=False)]


class Base(DeclarativeBase):
    __table_args__ = {"schema": db_settings.SCHEMA}
    type_annotation_map = {
        str_256: String(256),
        big_int_pk: BigInteger(),
        uuid.UUID: types.UUID(),
        big_int: BigInteger(),
    }
