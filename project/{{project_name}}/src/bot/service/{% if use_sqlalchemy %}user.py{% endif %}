from typing import Type

from aiogram import types
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

import src.bot.exceptions as exceptions
from src.database.models import TgUser


async def create_user(user: types.User, session: AsyncSession) -> None:
    if user.is_bot:
        raise exceptions.UserIsBotError()
    session.add(TgUser(
        id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username,
        language_code=user.language_code
    ))

    try:
        await session.commit()
    except IntegrityError as ex:
        raise exceptions.UserAlreadyExistsError() from ex
    return


async def get_user(user_id: int, session: AsyncSession) -> Type[TgUser]:
    user = await session.get(TgUser, user_id)
    if user:
        return user
    raise exceptions.UserNotFoundError()

